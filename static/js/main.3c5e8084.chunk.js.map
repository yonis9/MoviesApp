{"version":3,"sources":["SearchField.js","MovieCard.js","Cardlist.js","Navigation.js","Footer.js","UpcomingMovies.js","PopularMovies.js","SearchPage.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","onInputChange","id","type","placeholder","onChange","MovieCard","name","img","overview","rating","voteCount","date","handleVote","poster","to","pathname","state","className","src","Cardlist","data","map","movie","key","title","backdrop_path","poster_path","vote_average","vote_count","release_date","Navigation","icon","faHome","size","faStar","faSearch","Footer","href","target","rel","UpcomingMovies","upcomingMovies","PopularMovies","popularMovies","SearchPage","Movie","updateRating","e","setState","yourRating","value","console","log","window","localStorage","session_id","fetch","process","then","response","json","setItem","guest_session_id","method","headers","body","JSON","stringify","status_code","message","resMessage","prevProps","prevState","this","setTimeout","props","location","min","max","onClick","Component","require","config","App","searchInput","moviesSearch","results","prevprops","prevstate","route","path","exact","render","routeProps","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c5e8084.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchField.css'\r\n\r\nconst SearchField = ({ onInputChange }) => {\r\n    return (\r\n        <div>\r\n            <input id= 'searchinput' type='text' placeholder='Search movie' onChange={onInputChange}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport './MovieCard.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst MovieCard = ({name, img, overview, rating, voteCount, date, handleVote, id, poster }) => {\r\n    return (\r\n        <Link to={{pathname: `/movie/${id}`, state:{name, img, overview, rating, voteCount, date, id, poster } }}>\r\n        <div className='card'>\r\n            <img src={`https://image.tmdb.org/t/p/w200/${img}`} />\r\n            <div className='name'>\r\n                 <h3>{name}</h3>\r\n             </div>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport MovieCard from './MovieCard'\r\nimport './Cardlist.css';\r\n\r\nconst Cardlist = ({ data }) => {\r\n    return (\r\n        \r\n        <div id='cardlist'>\r\n{        data.map(movie => {\r\n            return (<MovieCard key={movie.id}\r\n                               name={movie.title} \r\n                               img={movie.backdrop_path}\r\n                               poster={movie.poster_path}\r\n                               overview={movie.overview}\r\n                                rating={movie.vote_average}\r\n                                voteCount={movie.vote_count}\r\n                                date={movie.release_date}\r\n                                id={movie.id}\r\n                                />)\r\n        })\r\n        }\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\nimport './Navigation.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faHome, faStar } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n      <nav>\r\n        <Link to='/'>\r\n          <div id='upcoming'>\r\n            <FontAwesomeIcon icon={faHome} size='lg'/>\r\n          </div>\r\n        </Link>\r\n        <Link to='/popular'>\r\n          <div id='popular' >\r\n            <FontAwesomeIcon icon={faStar} size='lg'/>\r\n          </div>\r\n        </Link>\r\n        <Link to='/search'>\r\n          <div id='search'>\r\n            <FontAwesomeIcon icon={faSearch} size='lg'/>\r\n          </div>\r\n        </Link>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n        <p>Made by <a href='https://github.com/yonis9' target='_blank' rel=\"noopener noreferrer\">Yoni Sisso</a></p>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Footer from './Footer'\r\n\r\nconst UpcomingMovies = ({ upcomingMovies }) => {\r\n    return (\r\n     <div>\r\n       <h3 className='section-header'>Upcoming Movies</h3>\r\n       <Cardlist  data={upcomingMovies} />\r\n       <Footer />\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default UpcomingMovies;","import React from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Footer from './Footer';\r\n\r\nconst PopularMovies = ( { popularMovies }) => {\r\n    return (\r\n      <div>\r\n        <h3 className='section-header'>Popular Movies</h3>\r\n        <Cardlist  data={popularMovies} />\r\n        <Footer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PopularMovies;","import React from 'react';\r\nimport SearchField from './SearchField';\r\nimport Cardlist from './Cardlist';\r\nimport Footer from './Footer';\r\n\r\nconst SearchPage = ( { onInputChange, handleVote, data}) => {\r\n    return (\r\n        <div>\r\n        <SearchField onInputChange={onInputChange}/>\r\n        <Cardlist  data={data} handleVote={handleVote}/>\r\n        <Footer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","import React, { Component } from 'react';\r\nimport './Movie.css';\r\nimport Footer from './Footer';\r\n\r\nclass Movie extends Component  {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            yourRating:0,\r\n            resMessage: '',\r\n            message: false \r\n                \r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(this.state.message){\r\n            window.setTimeout(() => {\r\n               this.setState({message: false ,resMessage: ''})\r\n                    \r\n            } ,2500)\r\n    \r\n        }\r\n    }\r\n    \r\n    updateRating = (e) => {\r\n        this.setState({yourRating: e.target.value})\r\n    }\r\n\r\n    handleVote = (id, rating) => {\r\n        console.log(id, rating)\r\n        if (!window.localStorage.session_id) {\r\n        \r\n        fetch(`https://api.themoviedb.org/3/authentication/guest_session/new?api_key=${process.env.REACT_APP_API_KEY}\r\n        `)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          window.localStorage.setItem('session_id', data.guest_session_id)\r\n        })\r\n    }\r\n    \r\n        const { session_id } = window.localStorage;\r\n        fetch(`https://api.themoviedb.org/3/movie/${id}/rating?api_key=${process.env.REACT_APP_API_KEY}&guest_session_id=${session_id}`,\r\n        {method: 'post',\r\n        headers:{\"Content-Type\": 'application/json'},\r\n        body: JSON.stringify({value: rating})\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.status_code === 1) {\r\n                this.setState({message: true, resMessage: 'Successful vote' })\r\n            } else if (data.status_code === 12) {\r\n                this.setState({message: true, resMessage: 'Successful updated vote' })\r\n            } else if (data.status_code === 12) {\r\n                this.setState({message: true, resMessage: 'Please insert vote rating between 0.0 - 10.0' })\r\n            }\r\n        })\r\n    \r\n      }\r\n\r\n    render() {\r\n        const { name, img, overview, rating, voteCount, date, id, poster } = this.props.location.state;\r\n        const { yourRating, resMessage } = this.state;\r\n    return (\r\n        <div>\r\n        <div className='movie'>\r\n                        <div className='description'>\r\n                        <h3> {name}</h3>\r\n                <p>{overview}</p>\r\n                <h5>Realese Date: {date}</h5>\r\n                <div className='name-rating'>\r\n                <input type=\"number\" name=\"quantity\" min=\"0\" max=\"10\" onChange={this.updateRating}/>\r\n                <button onClick={()=>this.handleVote(id, yourRating)}>Rate</button>\r\n                <h5>{resMessage}</h5>\r\n            <h4>{rating} ({voteCount})</h4>\r\n            </div>\r\n            </div>\r\n            <img src={`https://image.tmdb.org/t/p/w300/${poster}`} />\r\n        </div>\r\n        <Footer />\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport SearchField from './SearchField'\nimport Cardlist from './Cardlist'\nimport './App.css';\nimport Navigation from './Navigation';\nimport UpcomingMovies from './UpcomingMovies';\nimport PopularMovies from './PopularMovies';\nimport SearchPage from './SearchPage'\nimport Movie from './Movie';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      searchInput: 'batman',\n      moviesSearch: [],\n      popularMovies: [],\n      upcomingMovies: []\n    }\n  }\n\n  componentDidMount () {\n    fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ popularMovies: data.results})\n    })\n    fetch(`https://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ upcomingMovies: data.results})\n    })\n  }\n\n  componentDidUpdate(prevprops, prevstate) {\n    if (this.state.searchInput !== '' && prevstate.searchInput !== this.state.searchInput){\n      fetch(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${this.state.searchInput}&page=1`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ moviesSearch: data.results})\n      })\n    }\n  }\n\n  onInputChange = (e) => {\n    this.setState({ searchInput: e.target.value })\n  }\n\n\n\n  \n  render () {\n    const { moviesSearch, popularMovies,upcomingMovies, route } = this.state;\n    return (\n      <Router>\n        <div>\n          <Navigation />\n          <h1>Movies App</h1>\n\n          <Switch>\n            <Route path='/' exact render={(routeProps) => (<UpcomingMovies {...routeProps} upcomingMovies={upcomingMovies} />)} />\n          <Route path='/search' render={(routeProps) => (<SearchPage {...routeProps} onInputChange={this.onInputChange} data={moviesSearch} />)} />\n          <Route path='/popular' render={(routeProps) => (<PopularMovies {...routeProps}popularMovies={popularMovies} />)} />\n          <Route path='/movie/:id' render={(routeProps) => (<Movie {...routeProps} />)} />\n        </Switch>\n       </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}